[
  {
    "objectID": "content/01_journal/Stock_Analyzer.html",
    "href": "content/01_journal/Stock_Analyzer.html",
    "title": "Stock Analyzer",
    "section": "",
    "text": "Note\n\n\n\ncallout-note\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/Stock_Analyzer.html#header-2",
    "href": "content/01_journal/Stock_Analyzer.html#header-2",
    "title": "Stock Analyzer",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/Reporting_Tools.html",
    "href": "content/01_journal/Reporting_Tools.html",
    "title": "Reporting Tools",
    "section": "",
    "text": "# INTERACTIVE PLOTS ----\n\n# GOAL: DEVELOP INTERACTIVE PLOTS FOR A SALES REPORT\n\n# LIBRARIES & DATA ----\n\n# Main\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\n\n# Visualization\nlibrary(plotly)\n\n#&gt; \n#&gt; Attaching package: 'plotly'\n#&gt; \n#&gt; The following object is masked from 'package:ggplot2':\n#&gt; \n#&gt;     last_plot\n#&gt; \n#&gt; The following object is masked from 'package:stats':\n#&gt; \n#&gt;     filter\n#&gt; \n#&gt; The following object is masked from 'package:graphics':\n#&gt; \n#&gt;     layout\n\nbikes_tbl      &lt;- readRDS(\"/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bbdp-FelixAdams1827/content/01_journal/bike data/bikes_tbl.rds\")\nbikeshops_tbl  &lt;- readRDS(\"/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bbdp-FelixAdams1827/content/01_journal/bike data/bikeshops_tbl.rds\")\norderlines_tbl &lt;- readRDS(\"/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bbdp-FelixAdams1827/content/01_journal/bike data/orderlines_tbl.rds\")\n\nbike_orderlines_tbl &lt;- orderlines_tbl %&gt;%\n    left_join(bikes_tbl,     by = c(\"product_id\" = \"bike_id\")) %&gt;%\n    left_join(bikeshops_tbl, by = c(\"customer_id\" = \"bikeshop_id\")) %&gt;%\n    \n    # Add the total price\n    mutate(total_price = price_euro * quantity)\n\nformat_to_euro &lt;- function(x, suffix = \" €\") {\n\n  scales::dollar(x,\n                 suffix       = suffix,\n                 prefix       = \"\",\n                 big.mark     = \".\",\n                 decimal.mark = \",\")\n}\n\neuro_format &lt;- function(scale        = 1,\n                        prefix       = \"\",\n                        suffix       = \" €\",\n                        big.mark     = \".\",\n                        decimal.mark = \",\") {\n\n  scales::dollar_format(suffix       = suffix,\n                        prefix       = prefix,\n                        big.mark     = big.mark,\n                        decimal.mark = decimal.mark,\n                        scale        = scale)\n\n}\n\n\n# 1.0 TOTAL SALES BY MONTH ----\n\n# 1.1 Preparing Time Series Data ----\n# Monthly\n\ntotal_sales_m_tbl &lt;- bike_orderlines_tbl %&gt;%\n\n  select(order_date, total_price) %&gt;%\n\n  mutate(date_rounded = floor_date(order_date, unit = \"month\")) %&gt;%\n\n  group_by(date_rounded) %&gt;%\n  summarise(total_sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n\n  mutate(label_text = str_glue(\"Sales: {format_to_euro(total_sales)}\n                                 Date: {date_rounded %&gt;% format('%B %Y')}\"))\n\ntotal_sales_m_tbl\n\n\n\n  \n\n\n\n\n?format \n# Scroll down to Details and go to to date-times (click format.POSIXct)\n# All Abbreviations are listed here as well\n\n\"2011-01-01 00:00:00\" %&gt;% as_datetime() %&gt;% format(\"%B %Y\")\n\n#&gt; [1] \"January 2011\"\n\n## [1] \"January 2011\"\n\n\n# 1.2 Interactive Plot ----\n\n# Step 1: Create ggplot with text feature\n\ng1 &lt;- total_sales_m_tbl %&gt;%\n  ggplot(aes(x = date_rounded, y = total_sales)) +\n\n  # Geoms\n  geom_point() +\n  geom_smooth(method = \"loess\", span = 0.2) +\n\n  # Formatting\n  \n  # Convert scale to euro format\n  scale_y_continuous(labels = euro_format()) +\n  \n  # Make sure 0 will always be shown (even if the data is far away)\n  expand_limits(y = 0) +\n  \n  labs(\n    title = \"Total Sales\",\n    y = \"Revenue (EUR)\",\n    x = \"\"\n  )\n\ng1\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n# 1.3 Plot Total Sales Function ----\n\nplot_total_sales &lt;- function(unit = \"month\", date_format = \"%B %Y\", interactive = TRUE) {\n\n  # Handle Data\n  data_tbl &lt;- bike_orderlines_tbl %&gt;%\n\n    select(order_date, total_price) %&gt;%\n\n    mutate(date_rounded = floor_date(order_date, unit = unit)) %&gt;%\n\n    group_by(date_rounded) %&gt;%\n    summarise(total_sales = sum(total_price)) %&gt;%\n    ungroup() %&gt;%\n\n    mutate(label_text = str_glue(\"Sales: {format_to_euro(total_sales)}\n                                 Date: {date_rounded %&gt;% format(date_format)}\"))\n# Make Plot\n  g1 &lt;- data_tbl %&gt;%\n    ggplot(aes(x = date_rounded, y = total_sales)) +\n\n    # Geoms\n    geom_point(aes(text = label_text), color = \"#2C3E50\") +\n    geom_smooth(method = \"loess\", span = 0.2) +\n\n    # Formatting\n    scale_y_continuous(labels = euro_format()) +\n    expand_limits(y = 0) +\n    labs(\n      title = \"Total Sales\",\n      y = \"Revenue (Euro)\",\n      x = \"\"\n    )\n\n  # Static vs Interactive Logic\n  if (interactive) {\n    return(ggplotly(g1, tooltip = \"text\"))\n  } else {\n    return(g1)\n  }\n\n}"
  },
  {
    "objectID": "content/01_journal/Serving_Your_App.html",
    "href": "content/01_journal/Serving_Your_App.html",
    "title": "Serving your App",
    "section": "",
    "text": "Note\n\n\n\ncallout-note\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/Serving_Your_App.html#header-2",
    "href": "content/01_journal/Serving_Your_App.html#header-2",
    "title": "Serving your App",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/DDDM_For_Business.html",
    "href": "content/01_journal/DDDM_For_Business.html",
    "title": "Data-Driven Decision Making for Business",
    "section": "",
    "text": "Note\n\n\n\ncallout-note\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/DDDM_For_Business.html#header-2",
    "href": "content/01_journal/DDDM_For_Business.html#header-2",
    "title": "Data-Driven Decision Making for Business",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  }
]